"""Complete End-to-End Demo: Business Outcome -> Validated Pydantic Models

This demonstrates the full pipeline with REAL verification:
1. Natural language business outcome (YAML)
2. LinkML schema synthesis (via subagent)
3. Pydantic code generation (via LinkML)
4. Business logic validation (proves models work)
"""

import subprocess
from pathlib import Path


def print_header(title: str):
    """Print section header."""
    print("\n" + "="*80)
    print(f"  {title}")
    print("="*80 + "\n")


def main():
    """Run complete end-to-end pipeline demo."""

    print_header("OUTCOME-FIRST PYDANTIC MODEL GENERATOR - FULL PIPELINE DEMO")

    # Step 1: Show business outcome
    print_header("STEP 1: Business Outcome (Natural Language)")

    outcome_path = Path("dsl/examples/invoice_validation.yaml")
    with open(outcome_path) as f:
        content = f.read()

    print("Input: Invoice Approval Validation Outcome")
    print(f"File: {outcome_path}\n")
    print("Business Rules:")
    print("  - Invoice can ONLY be approved if:")
    print("    1. Amount <= Department Budget")
    print("    2. Vendor is approved")
    print("    3. Has valid purchase order")
    print("\nQuestions to Answer:")
    print("  Q1: Can this invoice be approved?")
    print("  Q2: Which invoices are blocked and why?")
    print("  Q3: What is the total pending amount per department?")

    # Step 2: Show generated LinkML schema
    print_header("STEP 2: LinkML Schema (Generated by Subagent)")

    schema_path = Path("schemas/overlays/invoice_overlay.yaml")
    print(f"Generated Schema: {schema_path}\n")
    print("Schema Components:")
    print("  - Budget (department_id, amount_limit)")
    print("  - ApprovedVendor (vendor_id, vendor_name, approval_status)")
    print("  - Invoice (invoice_id, department_id, vendor_id, amount, has_purchase_order)")
    print("  - ApprovalDecision (invoice_id, can_approve, reason)")
    print("\nRelationships:")
    print("  - Invoice.withinbudget -> Budget")
    print("  - Invoice.fromvendor -> ApprovedVendor")
    print("  - Invoice.hasdecision -> ApprovalDecision")

    # Step 3: Verify LinkML lint
    print_header("STEP 3: LinkML Validation")

    result = subprocess.run(
        ["linkml", "lint", str(schema_path)],
        capture_output=True,
        text=True
    )

    if result.returncode == 0:
        print("[PASS] LinkML schema is valid!")
        print(f"Output: {result.stdout.strip()}")
    else:
        print(f"[FAIL] LinkML lint failed: {result.stderr}")
        return False

    # Step 4: Generate Pydantic models
    print_header("STEP 4: Pydantic Code Generation (Real LinkML)")

    output_path = Path("generated/pydantic/invoice_models.py")
    result = subprocess.run(
        ["linkml", "generate", "pydantic", str(schema_path)],
        capture_output=True,
        text=True
    )

    if result.returncode == 0:
        output_path.parent.mkdir(parents=True, exist_ok=True)
        with open(output_path, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        print(f"[PASS] Pydantic models generated!")
        print(f"Output: {output_path}")
        print(f"Lines of code: {len(result.stdout.splitlines())}")
    else:
        print(f"[FAIL] Code generation failed: {result.stderr}")
        return False

    # Step 5: Verify import
    print_header("STEP 5: Import Verification")

    result = subprocess.run(
        ["python", "-c", "import generated.pydantic.invoice_models; print('SUCCESS')"],
        capture_output=True,
        text=True,
        cwd=Path.cwd()
    )

    if result.returncode == 0:
        print("[PASS] Pydantic models import successfully!")
    else:
        print(f"[FAIL] Import failed: {result.stderr}")
        return False

    # Step 6: Run business logic validation
    print_header("STEP 6: Business Outcome Validation (The Critical Test)")

    print("Running validation tests to prove models satisfy business requirements...\n")

    result = subprocess.run(
        ["python", "validate_outcome.py"],
        capture_output=True,
        text=True
    )

    print(result.stdout)

    if result.returncode == 0:
        print("\n[PASS] All validation tests passed!")
    else:
        print(f"\n[FAIL] Validation failed!")
        return False

    # Summary
    print_header("PIPELINE SUMMARY")

    print("PROOF OF CONCEPT COMPLETE:\n")
    print("[PASS] 1. Natural language business outcome defined")
    print("[PASS] 2. LinkML schema synthesized by subagent")
    print("[PASS] 3. Pydantic models generated by LinkML library")
    print("[PASS] 4. Models validated against business logic")
    print("[PASS] 5. All business questions can be answered\n")

    print("KEY VALIDATIONS:")
    print("  - Invoice approval logic works correctly")
    print("  - Budget constraints enforced")
    print("  - Vendor approval checks work")
    print("  - Purchase order validation works")
    print("  - Blocked invoice queries work")
    print("  - Department aggregations work\n")

    print("LIBRARIES USED:")
    print("  - LinkML: Schema definition and validation")
    print("    Location: C:\\Users\\sami\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\linkml")
    print("  - Pydantic: Data validation (v2.11.7)")
    print("  - Instructor: LLM structured output (used by subagent)")

    print("\nNEXT STEPS:")
    print("  1. Integrate with Graphiti for graph ingestion")
    print("  2. Build evaluation metrics (Recall@K, GAR, MDI)")
    print("  3. Add CLI interface")

    return True


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
